{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport findNumbers from './findNumbers.js';\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\n  var args = getArguments(defaultCountry, options, metadata);\n  return findNumbers(text, args.options, args.metadata);\n}\nexport function getArguments(defaultCountry, options, metadata) {\n  if (metadata) {\n    if (defaultCountry) {\n      options = _objectSpread(_objectSpread({}, options), {}, {\n        defaultCountry: defaultCountry\n      });\n    }\n  } else {\n    if (options) {\n      metadata = options;\n      if (defaultCountry) {\n        if (is_object(defaultCountry)) {\n          options = defaultCountry;\n        } else {\n          options = {\n            defaultCountry: defaultCountry\n          };\n        }\n      } else {\n        options = undefined;\n      }\n    } else {\n      metadata = defaultCountry;\n      options = undefined;\n    }\n  }\n  return {\n    options: _objectSpread(_objectSpread({}, options), {}, {\n      v2: true\n    }),\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AAEA,eAAe,SAASC,sBAAT,CAAgCC,IAAhC,EAAsCC,cAAtC,EAAsDC,OAAtD,EAA+DC,QAA/D,EAAyE;EACvF,IAAMC,IAAI,GAAGC,YAAY,CAACJ,cAAD,EAAiBC,OAAjB,EAA0BC,QAA1B,CAAzB;EACA,OAAOL,WAAW,CAACE,IAAD,EAAOI,IAAI,CAACF,OAAZ,EAAqBE,IAAI,CAACD,QAA1B,CAAlB;AACA;AAED,OAAO,SAASE,YAAT,CAAsBJ,cAAtB,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;EAC/D,IAAIA,QAAJ,EAAc;IACb,IAAIF,cAAJ,EAAoB;MACnBC,OAAO,mCACHA,OADG;QAEND,cAAc,EAAdA;MAFM,EAAP;IAIA;EACD,CAPD,MAOO;IACN,IAAIC,OAAJ,EAAa;MACZC,QAAQ,GAAGD,OAAX;MACA,IAAID,cAAJ,EAAoB;QACnB,IAAIK,SAAS,CAACL,cAAD,CAAb,EAA+B;UAC9BC,OAAO,GAAGD,cAAV;QACA,CAFD,MAEO;UACNC,OAAO,GAAG;YAAED,cAAc,EAAdA;UAAF,CAAV;QACA;MACD,CAND,MAMO;QACNC,OAAO,GAAGK,SAAV;MACA;IACD,CAXD,MAWO;MACNJ,QAAQ,GAAGF,cAAX;MACAC,OAAO,GAAGK,SAAV;IACA;EACD;EACD,OAAO;IACNL,OAAO,kCACHA,OADG;MAENM,EAAE,EAAE;IAFE,EADD;IAKNL,QAAQ,EAARA;EALM,CAAP;AAOA,C,CAED;AACA;;AACA;;AACA,IAAMG,SAAS,GAAG,SAAZA,SAAY,EAAC;EAAA,OAAIG,QAAOC,CAAP,MAAa,QAAjB;AAAA,CAAnB","names":["findNumbers","findPhoneNumbersInText","text","defaultCountry","options","metadata","args","getArguments","is_object","undefined","v2","_typeof","_"],"sources":["/home/venkataravindrapv/React/Landing-page/node_modules/libphonenumber-js/source/findPhoneNumbersInText.js"],"sourcesContent":["import findNumbers from './findNumbers.js'\r\n\r\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\r\n\tconst args = getArguments(defaultCountry, options, metadata)\r\n\treturn findNumbers(text, args.options, args.metadata)\r\n}\r\n\r\nexport function getArguments(defaultCountry, options, metadata) {\r\n\tif (metadata) {\r\n\t\tif (defaultCountry) {\r\n\t\t\toptions = {\r\n\t\t\t\t...options,\r\n\t\t\t\tdefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (options) {\r\n\t\t\tmetadata = options\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (is_object(defaultCountry)) {\r\n\t\t\t\t\toptions = defaultCountry\r\n\t\t\t\t} else {\r\n\t\t\t\t\toptions = { defaultCountry }\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\toptions = undefined\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmetadata = defaultCountry\r\n\t\t\toptions = undefined\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\toptions: {\r\n\t\t\t...options,\r\n\t\t\tv2: true\r\n\t\t},\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module","externalDependencies":[]}